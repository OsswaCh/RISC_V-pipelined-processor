//lw from data mem
  mem[0]=32'b00000000100000000010010010000011;  //lw x9, 16(x0)
  mem[1]=32'b00000000110000000010010000000011;  //lw x8, 12(x0)
  mem[2]=32'b00000000000000001000010100110111; //lui  x10, 8(x0)    # Load upper immediate to x10 (higher 20 bits of 8(x0))  
  mem[3]=32'b00000000001000000000011111101111;  //jal  x15, 2  # Jump and link to function loop_func (saves PC to x15)

  mem[4]=32'b00000000100001001000000100110011;  //add  x2, x9, x8
  mem[5]=32'b00000000000101000000010000010011;  //addi x8, x8, 1 
  mem[6]=32'b11111110100001001001111111100011;  //bne  x9, x8, -2 
  mem[7]=32'b00000000000000000000011100010011; //addi x14, x0, 0
  
  //lw from data mem
  mem[8]=32'b00000000010000000010010100000011;   //lw x10, 0(x0)   //(4)x0 = 5
  mem[9]=32'b00000000010000000010010000000011;  //lw x8, 4(x0)  //4(x0)= 3
  mem[10]=32'b00000000100000000010010010000011; //lw x9, 8(x0)    // 8(x0) = 7
  
  //Multiplication instructions (assuming M extension)
  mem[11]=32'b00000010100101000000001010110011; //mul x5, x8, x9#x5 = x8*x9(21)
  mem[12]=32'b00000010100101000001001100110011;//mulh x6, x8, x9 # x6 = high 32 bits of the multiplication (0)
  mem[13]=32'b00000010100101000011001110110011;//mulhu x7, x8, x9# x7 =unsigned multiplication high 32 bits (0)
  mem[14]=32'b00000010100101000000010110111011;  //mulw x11, x8, x9    # x11 = low 32 bits of the multiplication (21)
  // Division instructions (assuming M extension)
  
  mem[15]=32'b00000010100101000100011000110011;  //div  x12, x8, x9    # x12 = quotient of x8 / x9 (0)
  mem[16]=32'b00000010100101000110011010110011;  //rem  x13, x8, x9    # x13 = remainder of x8 / x9 (3) 
  mem[17]=32'b00000010100101000101011100110011;  //divu x14, x8, x9    # x14 = unsigned quotient of x8 / x9 (0)
  mem[18]=32'b00000010100101000111011110110011;  //remu x15, x8, x9    # x15 = unsigned remainder of x8 / x9 (3)
  
  // Set up registers with some initial values

  mem[19]=32'b00000000101000000000100000010011;  //addi x16, x0, 10   // x11 = 10
  // Arithmetic operations
  
  mem[20]=32'b00000001000001010000100010110011; //add   x17, x10, x16    //(15)
   
  mem[21]=32'b01000001000010001000100100110011;  //sub   x18, x17, x16    // (5)

  mem[22]=32'b00000000001001010001100110010011; //slli   x19, x10, 2      // (20)

  mem[23]=32'b01000000000110000101101000010011; //srai   x20, x16, 1       // (5) 
  // Logical operations
  
  mem[24]=32'b00000001000001010010101010110011; //slt   x21, x10, x16   //x16 = 1 
  mem[25]=32'b00000000101010000011101100110011;  //sltu  x22, x16, x10  //x17 = 1 
  mem[26]=32'b00000001000001010100101110110011;  //xor   x23, x10, x16     //(15)
  mem[27]=32'b00000001000001010111110000110011;  //and   x24, x10, x16    //(0)
  mem[28]=32'b00000001000001010110110010110011;  //or    x25, x10, x16    //(15)
  mem[29]=32'b00000000000000000010110100010111;  //AUIPC    x26, 2